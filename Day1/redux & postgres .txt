Backend(redis & postgresql)

=>Redis is a great choice for implementing a highly available in-memory cache to decrease data access latency, increase throughput, and ease the load off your relational or NoSQL database and application.

=>It is like a json & stores {key:"value"} pair.

#commands:
SET key value
=>ex:-SET name light
GET key
DEL key
KEYS *
EXISTS key
FLUSHALL 
ttl key   
=>(ttl:-time to live)
expire key seconds
=>ex:-expire name 10
after 10 sec it will delete the key and give -2 as output if we do (ttl key)
setex key seconds value
=>ex:-setex name 10 light


hset key field value [field value...]
hget key field value 
=>ex:-hset object sem 5 sec d


#SETS IN REDIS

 SADD key member [member ...]
  summary: Add one or more members to a set
  since: 1.0.0
  group: set

127.0.0.1:6379> help @set

  SADD key member [member ...]
  summary: Add one or more members to a set
  since: 1.0.0

  SCARD key
  summary: Get the number of members in a set
  since: 1.0.0

  SDIFF key [key ...]
  summary: Subtract multiple sets
  since: 1.0.0

  SDIFFSTORE destination key [key ...]
  summary: Subtract multiple sets and store the resulting set in a key
  since: 1.0.0

  SINTER key [key ...]
  summary: Intersect multiple sets
  since: 1.0.0

  SINTERSTORE destination key [key ...]
  summary: Intersect multiple sets and store the resulting set in a key
  since: 1.0.0

  SISMEMBER key member
  summary: Determine if a given value is a member of a set
  since: 1.0.0

  SMEMBERS key
  summary: Get all the members in a set
  since: 1.0.0

  SMISMEMBER key member [member ...]
  summary: Returns the membership associated with the given elements for a set
  since: 6.2.0

  SMOVE source destination member
  summary: Move a member from one set to another
  since: 1.0.0

  SPOP key [count]
  summary: Remove and return one or multiple random members from a set
  since: 1.0.0

  SRANDMEMBER key [count]
  summary: Get one or multiple random members from a set
  since: 1.0.0

  SREM key member [member ...]
  summary: Remove one or more members from a set
  since: 1.0.0

  SSCAN key cursor [MATCH pattern] [COUNT count]
  summary: Incrementally iterate Set elements
  since: 2.8.0

  SUNION key [key ...]
  summary: Add multiple sets
  since: 1.0.0

  SUNIONSTORE destination key [key ...]
  summary: Add multiple sets and store the resulting set in a key
  since: 1.0.0

EXAMPLES OF SET:-

 sadd object1 emp
(integer) 1
127.0.0.1:6379> sadd object1 empid empname
(integer) 2
 scard object1
(integer) 3
127.0.0.1:6379> smembers emp
(empty array)
127.0.0.1:6379> smembers object1
1) "emp"
2) "empid"
3) "empname"
 smove object1 employees emp
(integer) 1
127.0.0.1:6379> smembers employees
1) "emp"
2) "empadd"
127.0.0.1:6379> sunionstore employees object1
(integer) 2
127.0.0.1:6379> smembers employees
1) "empid"
2) "empname"
127.0.0.1:6379> smembers employees
1) "empid"
2) "empname"
127.0.0.1:6379> smembers object1
1) "empid"
2) "empname"
127.0.0.1:6379> sismember employees emp
(integer) 0
127.0.0.1:6379> sdiff object1 employees
(empty array)
127.0.0.1:6379> smembers object1
1) "empid"
2) "empname"
127.0.0.1:6379> smembers employees
1) "empid"
2) "empname"
127.0.0.1:6379> srandmember employees
"empname"
127.0.0.1:6379> srandmember object1
"empname"
127.0.0.1:6379> scard employees
(integer) 2
127.0.0.1:6379> spop object1 2
1) "empid"
2) "empname"
127.0.0.1:6379> scard object1
(integer) 0


#HASH(like Objects in js)

 HDEL key field [field ...]
  summary: Delete one or more hash fields
  since: 2.0.0

  HEXISTS key field
  summary: Determine if a hash field exists
  since: 2.0.0

  HGET key field
  summary: Get the value of a hash field
  since: 2.0.0

  HGETALL key
  summary: Get all the fields and values in a hash
  since: 2.0.0

  HINCRBY key field increment
  summary: Increment the integer value of a hash field by the given number
  since: 2.0.0

  HINCRBYFLOAT key field increment
  summary: Increment the float value of a hash field by the given amount
  since: 2.6.0

  HKEYS key
  summary: Get all the fields in a hash
  since: 2.0.0

  HLEN key
  summary: Get the number of fields in a hash
  since: 2.0.0

  HMGET key field [field ...]
  summary: Get the values of all the given hash fields
  since: 2.0.0

  HMSET key field value [field value ...]
  summary: Set multiple hash fields to multiple values
  since: 2.0.0

  HRANDFIELD key [count [WITHVALUES]]
  summary: Get one or multiple random fields from a hash
  since: 6.2.0

  HSCAN key cursor [MATCH pattern] [COUNT count]
  summary: Incrementally iterate hash fields and associated values
  since: 2.8.0

  HSET key field value [field value ...]
  summary: Set the string value of a hash field
  since: 2.0.0

  HSETNX key field value
  summary: Set the value of a hash field, only if the field does not exist
  since: 2.0.0

  HSTRLEN key field
  summary: Get the length of the value of a hash field
  since: 3.2.0

  HVALS key
  summary: Get all the values in a hash
  since: 2.0.0


#EXAMPLES OF HASH:-

127.0.0.1:6379> hset object name light
(integer) 1
127.0.0.1:6379> hget object name
"light"
127.0.0.1:6379> hget object
(error) ERR wrong number of arguments for 'hget' command
127.0.0.1:6379> hget object id
(nil)
127.0.0.1:6379> hset object id 1
(integer) 1
127.0.0.1:6379> hget keys *
(nil)
127.0.0.1:6379> hget object id
"1"
127.0.0.1:6379> hset object sem 5 sec d
(integer) 2
127.0.0.1:6379> hget object sec
"d"
127.0.0.1:6379> hget object sem
"5"

127.0.0.1:6379> hvals object
1) "light"
2) "1"
3) "5"
4) "d"
127.0.0.1:6379> hsetnx object name alpha
(integer) 0
127.0.0.1:6379> hvals object
1) "light"
2) "1"
3) "5"
4) "d"
127.0.0.1:6379> hsetnx object clg sstc
(integer) 1
127.0.0.1:6379> hvals object
1) "light"
2) "1"
3) "5"
4) "d"
5) "sstc"
127.0.0.1:6379> hscan object 0 count 1
1) "0"
2)  1) "name"
    2) "light"
    3) "id"
    4) "1"
    5) "sem"
    6) "5"
    7) "sec"
    8) "d"
    9) "clg"
   10) "sstc"


